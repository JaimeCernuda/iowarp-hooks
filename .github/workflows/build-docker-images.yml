name: Build and Push Docker Images

on:
  push:
    branches: [main]
    paths: ['docker/**']
  pull_request:
    branches: [main]
    paths: ['docker/**']
  release:
    types: [published]

env:
  REGISTRY: ghcr.io

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Discover Docker projects
        id: set-matrix
        run: |
          # Find all directories under /docker that contain Dockerfiles
          projects=()
          
          for project_dir in docker/*/; do
            if [ -d "$project_dir" ]; then
              project_name=$(basename "$project_dir")
              echo "Checking project: $project_name"
              
              # Find all Dockerfiles in this project directory
              dockerfiles=$(find "$project_dir" -name "Dockerfile*" -type f)
              
              for dockerfile in $dockerfiles; do
                # Extract the dockerfile name (e.g., Dockerfile.influxdb -> influxdb)
                dockerfile_name=$(basename "$dockerfile")
                if [ "$dockerfile_name" = "Dockerfile" ]; then
                  image_suffix=""
                else
                  image_suffix=$(echo "$dockerfile_name" | sed 's/Dockerfile\.//')
                fi
                
                # Create the full image name
                if [ -n "$image_suffix" ]; then
                  image_name="${project_name}-${image_suffix}"
                else
                  image_name="${project_name}"
                fi
                
                projects+=("{\"project\":\"$project_name\",\"dockerfile\":\"$dockerfile\",\"image\":\"$image_name\"}")
              done
            fi
          done
          
          # Convert to JSON array
          printf -v joined '%s,' "${projects[@]}"
          matrix="{\"include\":[${joined%,}]}"
          
          echo "Matrix: $matrix"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    needs: discover
    if: needs.discover.outputs.matrix != '{"include":[]}'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: docker/${{ matrix.project }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,scope=${{ matrix.image }}
          cache-to: type=gha,mode=max,scope=${{ matrix.image }}

      - name: Generate build summary
        run: |
          echo "## ðŸš€ Built Image: ${{ matrix.image }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Project:** ${{ matrix.project }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dockerfile:** ${{ matrix.dockerfile }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY